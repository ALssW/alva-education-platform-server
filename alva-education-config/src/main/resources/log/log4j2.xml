<?xml version="1.0" encoding="UTF-8"?>
<!-- status关闭log4j2自身的日志输出
monitorInterval log4j能够自动检测修改配置文件和重新配置本身，设置间隔秒数
 -->
<configuration status="OFF">
	<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
	<!--变量配置-->
	<Properties>
		<!-- 格式化输出：
			%date表示日期，
			%thread表示线程名，
			%-5level：级别从左显示5个字符宽度
			%C:输出日志类的名称
			%F:输出的文件名称
			%M:输出的方法名称
			%L:输出的行号
			%msg：日志消息
			%ex：异常信息
			%n是换行符-->
		<!--<property name="LOG_PATTERN" value="%date{yy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} [%X{X-B3-TraceId}, %X{X-B3-SpanId}, %X{X-B3-ParentSpanId}, %X{X-Span-Export}] - %msg%n" />-->
		<property name="LOG_PATTERN"
		          value="%date{yyyy-MM-dd HH:mm:ss.SSS} [%thread] [%-5level] %C.%M(%L) : %msg%n"/>
		<!-- 定义日志存储的路径，不要配置相对路径 -->
		<property name="FILE_PATH" value="./logs/${ctx:appName}"/>
		<property name="FILE_NAME" value="${ctx:appName}"/>
	</Properties>
	<!-- 定义输出器 -->
	<appenders>
		<console name="Console" target="SYSTEM_OUT">
			<!--输出日志的格式-->
			<PatternLayout pattern="${LOG_PATTERN}"/>
			<!--控制台只输出level及其以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
			<ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY"/>
		</console>

		<!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，适合临时测试用-->
		<!--<File name="FileLog" fileName="${FILE_PATH}/${FILE_NAME}_test.log" append="false">
			<PatternLayout pattern="${LOG_PATTERN}"/>
		</File>-->
		<!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
		<RollingFile name="RollingFileDebug" fileName="${FILE_PATH}/debug/${FILE_NAME}_debug.log"
		             filePattern="${FILE_PATH}/debug/${FILE_NAME}-DEBUG-%d{yyyy-MM-dd}_%i.log.gz">
			<!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
			<ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY"/>
			<PatternLayout pattern="${LOG_PATTERN}"/>
			<Policies>
				<!--interval属性用来指定多久滚动一次，默认是1 hour-->
				<TimeBasedTriggeringPolicy interval="1"/>
				<SizeBasedTriggeringPolicy size="10MB"/>
			</Policies>
			<!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件开始覆盖-->
			<DefaultRolloverStrategy max="15"/>
		</RollingFile>
		<!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
		<RollingFile name="RollingFileInfo" fileName="${FILE_PATH}/info/${FILE_NAME}_info.log"
		             filePattern="${FILE_PATH}/info/${FILE_NAME}-INFO-%d{yyyy-MM-dd}_%i.log.gz">
			<!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
			<ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
			<PatternLayout pattern="${LOG_PATTERN}"/>
			<Policies>
				<!--interval属性用来指定多久滚动一次，默认是1 hour-->
				<TimeBasedTriggeringPolicy interval="1"/>
				<SizeBasedTriggeringPolicy size="10MB"/>
			</Policies>
			<!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件开始覆盖-->
			<DefaultRolloverStrategy max="15"/>
		</RollingFile>
		<!-- 这个会打印出所有的warn及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
		<RollingFile name="RollingFileWarn" fileName="${FILE_PATH}/warn/${FILE_NAME}_warn.log"
		             filePattern="${FILE_PATH}/warn/${FILE_NAME}-WARN-%d{yyyy-MM-dd}_%i.log.gz">
			<!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
			<ThresholdFilter level="warn" onMatch="ACCEPT" onMismatch="DENY"/>
			<PatternLayout pattern="${LOG_PATTERN}"/>
			<Policies>
				<!--interval属性用来指定多久滚动一次，默认是1 hour-->
				<TimeBasedTriggeringPolicy interval="1"/>
				<SizeBasedTriggeringPolicy size="10MB"/>
			</Policies>
			<!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件开始覆盖-->
			<DefaultRolloverStrategy max="15"/>
		</RollingFile>
		<!-- 这个会打印出所有的error及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
		<RollingFile name="RollingFileError" fileName="${FILE_PATH}/error/${FILE_NAME}_error.log"
		             filePattern="${FILE_PATH}/error/${FILE_NAME}-ERROR-%d{yyyy-MM-dd}_%i.log.gz">
			<!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
			<ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
			<PatternLayout pattern="${LOG_PATTERN}"/>
			<Policies>
				<!--interval属性用来指定多久滚动一次，默认是1 hour-->
				<TimeBasedTriggeringPolicy interval="1"/>
				<SizeBasedTriggeringPolicy size="10MB"/>
			</Policies>
			<!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件开始覆盖-->
			<DefaultRolloverStrategy max="15"/>
		</RollingFile>
		<!-- 这个会打印出所有的SQL指令记录的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
		<RollingFile name="SQLInfoLog" fileName="${FILE_PATH}/sql/${FILE_NAME}_druid_sql.log"
		             filePattern="${FILE_PATH}/sql/${FILE_NAME}-druid-SQL-%d{yyyy-MM-dd}_%i.log.gz">
			<!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
			<ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY"/>
			<PatternLayout pattern="${LOG_PATTERN}"/>
			<Policies>
				<!--interval属性用来指定多久滚动一次，默认是1 hour-->
				<TimeBasedTriggeringPolicy interval="1"/>
				<SizeBasedTriggeringPolicy size="10MB"/>
			</Policies>
			<!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件开始覆盖-->
			<DefaultRolloverStrategy max="15"/>
		</RollingFile>
	</appenders>
	<!--Logger节点用来单独指定日志的形式，比如要为指定包下的class指定不同的日志级别等。-->
	<!--然后定义loggers，只有定义了logger并引入的appender，appender才会生效-->
	<!-- 如果使用<asyncRoot> 或 <asyncLogger>，includeLocation="true"是必须要设置才会有类路径等一些信息打印出来   -->
	<loggers>
		<!--<root level="info">-->
		<!--    <appender-ref ref="Console"/>-->
		<!--    <appender-ref ref="RollingFileDebug"/>-->
		<!--    <appender-ref ref="RollingFileInfo"/>-->
		<!--    <appender-ref ref="RollingFileWarn"/>-->
		<!--    <appender-ref ref="RollingFileError"/>-->
		<!--</root>-->
		<!-- 过滤 让自己的debug日志可以输出到控制台 additivity=false 关闭日志输出的继承 -->
		<!--<logger name="PACKAGE_NAME" level="debug">-->
		<!--</logger>-->

		<!-- 异步输出器 -->
		<asyncroot level="info" includeLocation="true">
			<appender-ref ref="Console"/>
			<appender-ref ref="RollingFileDebug"/>
			<appender-ref ref="RollingFileInfo"/>
			<appender-ref ref="RollingFileWarn"/>
			<appender-ref ref="RollingFileError"/>
		</asyncroot>

		<asynclogger name="druid.sql.Statement" level="debug" includeLocation="true" additivity="false">
			<appender-ref ref="SQLInfoLog"/>
		</asynclogger>

		<asynclogger name="cn.alvasw" level="debug" includeLocation="false"/>

	</loggers>
</configuration>